/**
 * @packageDocumentation
 *
 * The peer store is where libp2p stores data about the peers it has encountered on the network.
 */
import type { ComponentLogger, Libp2pEvents, TypedEventTarget, PeerId, PeerStore } from '@libp2p/interface';
import type { Multiaddr } from '@multiformats/multiaddr';
import type { Datastore } from 'interface-datastore';
export interface PersistentPeerStoreComponents {
    peerId: PeerId;
    datastore: Datastore;
    events: TypedEventTarget<Libp2pEvents>;
    logger: ComponentLogger;
}
/**
 * Return true to allow storing the passed multiaddr for the passed peer
 */
export interface AddressFilter {
    (peerId: PeerId, multiaddr: Multiaddr): Promise<boolean> | boolean;
}
export interface PersistentPeerStoreInit {
    addressFilter?: AddressFilter;
}
export declare function persistentPeerStore(components: PersistentPeerStoreComponents, init?: PersistentPeerStoreInit): PeerStore;
//# sourceMappingURL=index.d.ts.map
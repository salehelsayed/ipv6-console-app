import { PeerMap } from '@libp2p/peer-collections';
import * as varint from 'uint8-varint';
import { parseProviderKey, readProviderTime, toProviderKey } from './utils.js';
/**
 * Provides a mechanism to add and remove provider records from the datastore
 */
export class Providers {
    log;
    datastore;
    datastorePrefix;
    lock;
    constructor(components, init) {
        this.log = components.logger.forComponent(`${init.logPrefix}:providers`);
        this.datastorePrefix = `${init.datastorePrefix}/provider`;
        this.datastore = components.datastore;
        this.lock = init.lock;
    }
    /**
     * Add a new provider for the given CID
     */
    async addProvider(cid, provider) {
        const release = await this.lock.readLock();
        try {
            this.log('%p provides %s', provider, cid);
            await this.writeProviderEntry(cid, provider);
        }
        finally {
            release();
        }
    }
    /**
     * Remove a provider for the given CID
     */
    async removeProvider(cid, provider) {
        const release = await this.lock.writeLock();
        try {
            const key = toProviderKey(this.datastorePrefix, cid, provider);
            this.log('%p no longer provides %s', provider, cid);
            await this.datastore.delete(key);
        }
        finally {
            release();
        }
    }
    /**
     * Get a list of providers for the given CID
     */
    async getProviders(cid) {
        const release = await this.lock.readLock();
        try {
            this.log('get providers for %c', cid);
            const provs = await this.loadProviders(cid);
            this.log('got %d providers for %c', provs.size, cid);
            return [...provs.keys()];
        }
        finally {
            release();
        }
    }
    /**
     * Write a provider into the given store
     */
    async writeProviderEntry(cid, peerId, time = new Date()) {
        const key = toProviderKey(this.datastorePrefix, cid, peerId);
        const buffer = varint.encode(time.getTime());
        await this.datastore.put(key, buffer);
    }
    /**
     * Load providers for the given CID from the store
     */
    async loadProviders(cid) {
        const providers = new PeerMap();
        const key = toProviderKey(this.datastorePrefix, cid);
        for await (const entry of this.datastore.query({ prefix: key.toString() })) {
            const { peerId } = parseProviderKey(entry.key);
            providers.set(peerId, readProviderTime(entry.value));
        }
        return providers;
    }
}
//# sourceMappingURL=providers.js.map